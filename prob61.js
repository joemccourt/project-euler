// Joe McCourt
// Jan 25th, 2014
// Project Euler problem 61
// Cyclical figurate numbers

// Triangle, square, pentagonal,
// hexagonal, heptagonal, and octagonal numbers
// are all figurate (polygonal) numbers
// and are generated by the following formulae:

// Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
// Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
// Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
// Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
// Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
// Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
// The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

// The set is cyclic, in that the last two digits
// of each number is the first two digits of the next number 
//(including the last number with the first).
// Each polygonal type: triangle (P3,127=8128),
// square (P4,91=8281), and pentagonal (P5,44=2882),
// is represented by a different number in the set.
// This is the only set of 4-digit numbers with this property.

// Find the sum of the only ordered set of six cyclic 4-digit
// numbers for which each polygonal type: triangle, square,
// pentagonal, hexagonal, heptagonal, and octagonal,
// is represented by a different number in the set.


//Note that octagonal numbers grow fastest, so search those first
// var figurates = [0,0,0,0,0,0];

var figurates = [];

var genFigurates = function(max) {
	
	for(var f = 0; f < 6; f++) {
		figurates[f] = [];
		var n = 1;
		var num = 1;
		while(num < max) {
			
			if(f == 0) {
				num = n*(n+1)/2;
			} else if(f == 1) {
				num = n*n;
			} else if(f == 2) {
				num = n*(3*n-1)/2;
			} else if(f == 3) {
				num = n*(2*n-1);
			} else if(f == 4) {
				num = n*(5*n-3)/2;
			} else if(f == 5) {
				num = n*(3*n-2);
			}
			figurates[f][n-1] = num;
			n++;
		}
	}
};

genFigurates(10000);

// console.log(figurates);

var count = 0;
var searchCycle = function(numbers, figs, index) {

	count++;
	var number = numbers[index];
	var numberEnd = number.toString().substr(2);

	if(figs[0] == 1 && figs[1] == 1 && figs[2] == 1 && figs[3] == 1 && figs[4] == 1 && figs[5] == 1) {
		if(number.toString().substr(2) == numbers[0].toString().substr(0,2)) {
			console.log(numbers);
			console.log(numbers[0]+numbers[1]+numbers[2]+numbers[3]+numbers[4]+numbers[5]);
			return;
		}
	}


	for(var i = 0; i < figs.length; i++) {
		if(figs[i] == 0) {
			for(var j = 0; j < figurates[i].length; j++) {
				var newNumber = figurates[i][j];
				var newStart = newNumber.toString().substr(0,2);

				if(numberEnd == newStart) {
					var newNumbers = numbers.slice(0);
					newNumbers[index+1] = newNumber;

					var newFigs = figs.slice(0);
					newFigs[i] = 1;
					searchCycle(newNumbers, newFigs, index+1);
				}
			}
		}
	}

};


for(var i = 0; i < figurates[5].length; i++) {
	searchCycle([figurates[5][i],0,0,0,0,0],[0,0,0,0,0,1],0);
}

console.log(figurates[0].length)
console.log(count);
// // n*(n+1)/2 = num
// // n*n+n = 2*num
// // n*n+n-2*numb = 0
// // 
// var isTriangle = function(num) {

// 	var n = 

// }